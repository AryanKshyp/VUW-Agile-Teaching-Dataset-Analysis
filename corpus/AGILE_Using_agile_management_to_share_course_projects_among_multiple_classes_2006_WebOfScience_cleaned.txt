Using Agile Management to Share Course Projects Among Multiple Classes


Abstract
Project based courses have become popular as a way of engaging students and providing practical experiences. Sharing a single project between two course provides advantages of permitting more focus on the subject of each class, larger projects (more help and expertise is available) and greater opportunities for coordinated team work, and to appreciate how disciplines interact. A disadvantage is scheduling and managing class activities and risk to assure that useful project work is done at a pace benefiting both classes. This paper describes an experience in which an Agile approach was used to successfully coordinate project activities among a Software Development course and a User Interaction Design course.


1. Introduction
Project based courses are commonly used in applied areas of computer science such as software development and user interaction design. Projects provide experiences which help students learn concepts by applying them in real situations (Active Learning[4]) A dilemma facing many project based courses is that the students do not know all the necessary concepts to complete substantial projects until the course is near its end, by then, there is little time left to complete a project. In some curriculums this problem is addressed by a two course sequence, a design is created in the first course and then implemented in the second. Regardless of the merits of this approach, many institutions have constraints which do not permit the two course solution.
Agile programming methods provide another possibility. In this approach only minimal up front planning is required allowing project work to begin before all the course concepts are introduced. Work is completed in small iterations and requirements are expected to change as the project is developed. Importantly, design is to continue throughout development and previous code is modified (refactored) to make it more straight-forward and easier to understand and maintain. This compensates for starting to code without a complete overall design.
Extreme Programming has become more common in Computer Science curriculum at all levels and even for Capstone projects [6, 8, 10, 11]. For several years, we have been using a process based upon Extreme Programming for our project based software design and development course [11]. The results have been positive and permit us to provide a very useful team development experience in a one semester senior/graduate level course.
To accommodate students from different backgrounds and interests, our software course has general computer science prerequisites but does not require specific skills such as database or artificial intelligence which might be taken by only a subset of our students. This limitation reduces the scope of projects which might be appropriate for the class. We try to incorporate the principle of shared ownership and want all students to feel that they can make a significant contribution to the project.
A major portion of most projects involves a user interface. While much effort is spent in coding the user interface, only cursory treatment is given to user interface design. Similarly, the user interaction design course, also a senior/graduate level course, has only general prerequisites and utilizes a project oriented approach.
In user interaction design, the emphasis is on understanding the user, and designing an appropriate interface. While some instruction is provided on development issues, the main emphasis is on the design process. Working on teams and with outside users is important in this class as well.


2. Course Descriptions
The two courses of interest for this paper were both offered in the Spring semester (15 weeks) of 2005 and taught by the author. The classes were taken by a diverse group of seniors and masters students. Enrollments were 14 in the software development course and 17 in the user interaction design course. Four students were concurrently enrolled in both courses. Both courses have similar prerequisites and assume familiarity with object oriented and systems programming. Most students will have backgrounds in Java and C although some may have used C++ for object oriented programming.
2.1. User Interface Design & Development
This course has been offered approximately once per year since 1994. Students are assumed to have strong computer science backgrounds but no previous experience with building GUIs. Human-centered software design, development, and prototyping and evaluation constitute the major portions of the course. Characteristics of code to support user interaction is also discussed (event handling, Model-View-Controller) but prototyping and design process is emphasized rather than full implementations for project work.
Low fidelity (paper) prototyping is introduced early to help promote both team building and class interactions. The course introduces user-centered design principles and working on a team. It aims to sensitize computer science students to user concerns and to dispel the notion that simply knowing how to code a GUI is all that is needed to make usable products.
A series of projects, usually in groups of approximately 4 cover aspects of: understanding users and their requirements; paper prototyping; evaluation; design specifications (screens, interaction flow diagrams/state charts etc.). The exercises are done iteratively and build on feedback from previous iterations.
An interface builder tool is introduced to the class and sometimes used to create prototypes or screen shots. Through code, requirements gathering, and design specification, the course examines how interaction design and software design co-exist and interact [2, 5]
Students act as users and experts to assist in the evaluation of other student projects. External users are also brought in for usability feedback. The applications are fairly simple but offer many opportunities for creativity. In this offering, the application applied captions to images and was to include a variety of automated and customizing features (See section 4.1). By the end of the semester, all students were working as a team to develop the application.
2.2. Software Design & Development
For many years this project based course has been offered almost every semester. In Fall 2002, its format was switched from a more bureaucratic process to one based upon Extreme Programming. The course [11] continues to evolve but the transition has gone smoothly. To better support Extreme Programming practices and to enhance instruction and feedback, the course meets 4 days a week: 2 lecture sessions and 2 lab sessions.
An extensive lab exercise (a guided tutorial demonstrating the IDE and other development tools along with the ideas of the Model-View-Controller paradigm (MVC) and Test First Development) is usually given in the second week. The initial goal of the course is to make everyone comfortable with the development environment and the basics of Java. An introduction to software development and Extreme Programming is presented concurrently. Lectures reinforce and guide lab activities. Students are grouped into teams of three or four and introduced to a starter project.
The MVC (Model-View-Controller) paradigm is exploited to allow Java coding to start immediately even though students are not familiar with the Java Swing(GUI) libraries. The initial code is very straightforward in its use of language features since teams begin by focusing on the model. Test first development is also stressed. Java Swing code needed to create View/Controllers supporting graphical user interfaces (GUIs) is introduced after model testing and coding is well underway. Handouts demonstrating coding, including testing ideas and refactoring is often presented using simple MVC examples which parallel project work.

After several weeks on the practice project, work begins on an instructor selected project which serves the needs of an external (to the class) customer. Outside customers provide a more realistic experience for students in determining customer requirements and acceptance tests. Project groups usually start small (approximately 4) and eventually merge to involve the entire class (about 16). Students are motivated by the realization that their project has a real chance of being used to benefit someone else’s work.


3. Motivations and Concerns
Sharing a common project across multiple concurrent classes would not have been attempted unless significant benefits were expected. There was also a risk that the project, a central part of both courses, would become a failure due to unanticipated problems introduced by the additional collaborative elements. It would be very difficult to coordinate scheduling between classes even if two very like-minded and motivated professors were involved.
In Spring of 2005, I was given the assignment to teach both the Software Development(SD) and the User Interaction(UI) course. I saw this as a rare opportunity to coordinate the project work of both classes to hopefully achieve a symbiosis of sorts in which both classes would benefit.
3.1. Benefits
• Each class is able to focus more upon their speciality during project development.
• Team interaction is enhanced.
• Relationships between the different disciplines can be explored first hand.
• Project breadth and depth can be increased.
• Project quality can be improved.
• Precursor to a possible capstone experience.
Real software projects are multidiscipline and involve contributions from specialists with different areas of expertise. Conversely, computer science is usually taught as individual subject courses with little interaction outside of a narrow discipline. This may limit project scope since many interesting projects cut across disciplines and there is neither the time or skills necessary to augment the core material. With help from another class both classes have the opportunity to
explore their subject in greater depth and to build more comprehensive projects since they may rely on skills brought in by student from another course. Team work across courses provides additional group work experiences for students.
Interactions across subject areas also serves as a chance to explore how different disciplines in computer science relate to each other. For instance, coupling interaction design with software development is the subject of recent research [2, 5, 7, 9]. Rather than just lecturing about the issues in class, students can experience them first hand during project interactions.
We have been exploring the idea of a capstone project course which would require teamwork and integration of knowledge concepts from multiple areas of computer science. Projects shared across concurrent courses may evolve into a key component of our capstone experience. The joint work between these 2 courses was a chance to experiment with this concept.
3.2. Learning Goals and Objectives
The project should enhance the lectures and provide practical experiences with tools, techniques and team skills. Broadly speaking, we expect project work to provide the following experiences:
• creatively apply concepts
• resolve ambiguity and uncertainty
• participate as a team member
• interact with a client/user
• obtain practical hands-on experiences
In the case of the UI course, project teamwork that emphasizes user centered design, evaluation and frequent iterations would be given. Examples are: Consulting with potential customers about their requirements (interviews, observations, surveys, development of personas). Constructing low fidelity prototypes of an application and obtaining feedback through evaluation sessions held with potential customers. Expressing interface design ideas in a form that can be passed on to software developers. Assessing a design’s conformance to User Interface standards.
The SD course, employing a methodology based upon Extreme Programming, uses experiences which are iterative and stresses teamwork and communications. These would likely include: Working with a customer to develop and complete user stories. Implementing code using pair programming, test driven development, simple design, and frequent refactoring. Little up front design is used and design and implementation is continually applied in an iterative, incremental manner. Code is shared among the team and experience is given in IDE, automated building and testing, and source code control.
3.3. Concerns
The primary concern was to assure that the students in both classes would have an acceptable project experience. Coordinating the communications and work products expected between the courses was expected to be difficult. A major component for both classes is to experience the process of design. The UI contribution was expected to focus on interaction design and evaluation while the software course was to focus on an actual design and implementation of the software.
With so many details unknown and the established tradition of Extreme Programming in our SD course, it was decided to loosely couple the course projects using an Agile management style. The instructor would buffer the connection between classes by providing additional information, direction and feedback if needed. The opportunity to teach both courses concurrently meant that all coordination could be handled by a single faculty member.


4. Implementation
The concept for an application that would potentially be of use to multiple types of users was created. The concept was discussed with those who might become users and informal agreements were made to supply users/customers for some of the class experiences. The concept was left broadly defined so that the students would have leeway to develop many of the design ideas themselves.
4.1. ImageCaptioner: Basic Description
After both classes have had a chance to get a grounding in their subject area and a chance to get used to working in teams, the ImageCaptioner project was introduced. The program concept was explained as follows: “ImageCaptioner is to be a new application which will allow users to add caption data to images. The software should make it easy for a casual user to add a simple caption to a photo. A new image consisting of the original image plus the visible caption can
be created and exported. The software should also have batch features that allow at least some of the caption data to be read in from a data file. Other caption data might be automatically generated by the system based upon time, date, file name and location etc. To allow future caption edits, the original data should remain unchanged thus the caption information needs to be stored in a separate file.
To make it easier to review collections of images, an image proofs, view should show multiple image thumbnails with at least some caption data. The automated features will be especially useful for professional purposes where images are used to record data.”
The UI course was introduced to the project first. About a month later, the software course would join in. Initially there was no specific schedule for joint project work.
4.2. Overall Project Management
This project was conceived and developed without specific knowledge of the work products to be produced or an established time line. Instead an agile approach to managing it was used. Agile management follows in the spirit of the Agile Manifesto [1] and is light and adaptive, focusing on people and interactions. Agile management [3] has been successfully used to manage real-world software projects faced with uncertain and changing requirements.
The project was introduced in the UI course before making a commitment to using it as a project in the SD course. The expected exercises in the UI course could be adapted to be independent of any outside cooperation. The guiding approach for coupling the interaction design with the software development was to be similar to that proposed by [9]. A quick interaction design using low fidelity prototypes is used to establish overall concepts. To avoid wasted time and effort in up front planning, the development work starts soon after and details are built up iteratively.
The UI class was also used to gather more customer requirements and feedback and to help uncover and assess the importance of the user stories. The SD class was used to provide feedback to the UI class about the effort required to complete the stories so intelligent decisions could be made about reducing the interaction design. The instructor played shadow roles through these exchanges helping to spur discussions and guide decisions.
The UI class’s role was to continue to refine the design and make adjustments based upon feedback 
from users (sometimes based upon prototypes and surveys etc.). These adjustments also needed to take into account the work-effort estimates obtained from the software development class. The SD class focused mostly on implementing the stories worked out by the UI group. Occasionally users or UI students representing users would be present in lab sessions for demos and to provide feedback.
We established deadlines for the first and second iterations. As deadlines approached consultations would occur about scaling back features to meet the deadline. Good discussions also occurred regarding specific meanings of the features (Export versus Save, default values, customer acceptance tests etc.). The final interface was used for an evaluation exercise in the UI class.
4.3. UI Course Project View
The ImageCaption project was introduced to the UI course as a group project. Groups of 3 to 4 students were to work together to firm up user requirements, develop the major interaction flows and screen spaces. Additional information in the form of scenarios representing the concerns of different user types were presented. The teams were also assigned to produce paper prototypes to be evaluated and to revise a set of user stories to express requirements.
Over the course of more than a month the UI course worked on aspects of this project. No coding was required and evaluations using their paper prototypes with classmates from other groups as well as outside users were sometimes conducted in class. Iteration beyond the original expectations was necessary as many groups did not fulfill all the original requirements.
Group discussions in class were used to collect proposed features in the form of stories. Acting on the user’s behalf, the UI course was polled to determine the priorities of the user stories. A wiki was established as a way of communicating between the UI course and the SD course. The UI course was expected to clear up ambiguities in the user stories related to the application’s interaction.
Design ideas were modified and merged as it became clear that all envisioned features could not be implemented. Scope was adjusted to provide a useful subset of features and the interface design had to be adjusted to reduce its scope and complexity. It also became apparent that uncertainty existed regarding
some behavioral aspects of the program as well as other details.
The original groups were dissolved and groups specializing on particular aspects of the emerging program were formed: Completeness and Utility, Navigation, Appearance and Layout, Task Specifics, Help and Documentation, Error Prevention and Recovery. Towards the end of the semester these groups were merged into 3 groups for summary activities directed at evaluating the usability of the resulting application.
4.4. SD Course Project View
Students in the SD course had a separate project to work on during the first part of the semester. It focused on getting them familiar with the development tools and many of the practices of Extreme Programming. During the second half of the course they were introduced to the ImageCaptioner project with the same basic concept description that was given to the UI course. In addition they were given a list of possible stories as well as advice on some areas to try code spikes on.
A project wiki was set up to promote communication among the students. The SD began with a focus on the Model (of the Model-View-Controller paradigm) and on spiking to understand code which works with images. The UI course provided a more complete list of stories with customer priorities. Through discussions designed to simulate the planning game, the SD established a reasonable amount of effort that could be accomplished in an iteration (3 to 4 weeks). Based upon customer priorities and providing a sensible subset of features, a story list for the first iteration was designated. To enhance class communications, a code review exercise was conducted. Students had to explain sections of code that they had worked on.
A draft design was presented for iteration 2 along with its corresponding stories. SD students worked to complete this iteration with some details (default values, error situations, wording of messages etc.) to be assisted by the UI students. Students enrolled in both classes made valuable contributions. Executable jar files were made available on the wiki so UI students could experiment and evaluate the application.


5. Discussion & Conclusion
An agile management style was used to coordinate the project work of 2 different class offered during the same semester. The courses, one in software development and the other in user interaction design both rely upon significant team project experiences. Sharing the project work allowed both courses to concentrate on their particular subject areas while working on a more complete project implementation.
Work in both classes progressed using iterative development. This allowed more opportunity for feedback and adjustment of scope than would be possible with a traditional sequential software development methodology. Both classes benefitted from additional team experiences and a greater chance to explore the details of their subject and its interaction with another.
Sharing a project across courses does add complexity to course planning. The biggest problems encountered in this experience was helping everyone to find something useful to do without forcing them into rigid roles. Additionally, students often fail to communicate with each other or show a lack of initiative in exploring creative problems. Similar problems are encountered in the software development course. Regularly scheduled lab meetings in the SD course and class project time in the UI course help the intra-course communication. If scheduling allows, regular joint meeting times for all students seemingly would enhance whole group communications.
Strategies used here to help minimize these problems sought to actively engage students(Active Learning [4]) For instance by encouraging students with questions to speak up and get help from team-mates; using the extreme programming practice of stand-up meetings, forming students into discussion groups with a specific purpose; presenting questions and exercises in class which relate to problems seen in the project. Active involvement by the instructor with code examples, pair programming with students, and direct modifications of the project code can also help to spark stuck projects.
Sharing a project across concurrent classes using an agile management approach has provided an enhanced project experience for students in both classes. Students can experience first hand how the various disciplines in computer science interact in a practical way. This approach shows promise for expanding the type and quality of project experience provided to students in many different subject areas. Software courses, especially those using extreme programming and other agile development methodologies, provide a good match for many other project based courses. This route may provide an attractive format for a Capstone offering which is not a free standing course. In the future we would like to try sharing
projects among other courses(software development and database for instance) and involve more faculty.
