 Scrum to Support Mobile Application Development Projects in a Just-in-time Learning Context


ABSTRACT
Developing mobile applications is a challenging endeavor where technology and creativity are essential. Agile methodologies seem to be particularly adapted to the development of mobile applications; mobile applications have a limited scope and user interaction and time to market are particularly important. In this paper, we describe a study that evaluates the use of Scrum for software success in mobile application development. We defined an innovative model of working with Scrum in a class setting at Pace University involving a professional Scrum Master of the New York software industry and a real product owner. The mobile application that was developed targeted the growing mobile market in Africa. We explored the overall experience, adoption of Scrum and difficulties encountered by teams using Scrum for the first time. The paper reports on our findings and summarizes guidelines for instructors interested in replicating our work.
Categories and Subject Descriptors
D.2.9 [Software Engineering]: Management - Software process models, Time estimation.
General Terms
Management, Languages.
Keywords
Agile Methodologies, Education, Java ME, Mobile Application Development, Scrum.

1. INTRODUCTION
The mobile application landscape is evolving rapidly with a variety of types of applications in areas including social networking, entertainment, marketing, mapping, finance, education, health and agriculture. The industry follows a strict time to market requirement orchestrated by a fierce competition where standards are not stable. Developing mobile applications is a challenging endeavor where technology and creativity are crucial. Applications are developed on one platform and need to be deployed on other ones, i.e. mobile phones. Each device comes with specificities and constraints that have to be accounted for during application development. Mobile phones have physical characteristics (e.g., device and screen size and data input mechanism) and technical characteristics (e.g., processing power, memory space and operating system). Mobile interaction design (creating a user experience based on user needs) is crucial in the development of mobile applications and relates directly to the adoption of mobile applications. It is composed of user research (target device analysis, ethnographic studies and user comprehension, and requirements gathering), design (concepting, organization, interaction design and rapid prototyping) and quality assurance (focus group testing and usability testing) [3,10].
Agile methodologies offer lighter and faster development. They have achieved a high level of popularity and success in the software industry by recognizing that a good client / developer relationship is crucial for success in software development [11]. They appear to be particularly adapted to mobile application development. Mobile-D is an example of agile approach developed in the context of mobile application development that borrows practice from Extreme Programming for development practices, Crystal for scalability, and Rational Unified Process for life-cycle coverage [1,2]. In this paper we focus on Scrum, an iterative and incremental framework commonly used with agile methodologies [6,15,16]. It uses iterations of fixed duration (one to four weeks) called Sprints. There are three main roles. The Product Owner is responsible for achieving business value and is in charge of the product vision represented by a prioritized list of evolving requirements, tasks, constraints and bugs organized in a Product Backlog. Requirements are generally described by User Stories. The Scrum / Delivery team (from three to fifteen people) develop the software. The Scrum Master guides the team through the process and helps the team to resolve issues. At the beginning of each Sprint, during the Sprint Planning, the team commits to complete a certain number of tasks established from the Product Backlog and documents them in a Sprint Backlog. Tasks are committed to by team members and estimated. At the end of each Sprint there is a Sprint Demo Review and a Retrospective. During the Sprint Retrospective the velocity and morale of the teams and the quality of the work are evaluated. The team meets in a Daily Scrum Meeting where each team member responds to three questions: what he / she has done since the last meeting, what he / she hopes to do until the next meeting and what are any impediments to achieving the goal. The amount of time required to complete each of the tasks is updated in the Sprint Backlog. The Scrum Master maintains a Sprint Burndown Chart, as a metrics for the team’s progress, which shows for each task how much hours or days remains until the team’s commitment is
completed.
Agile methodologies are intently introduced in the Computer Science curriculum and on students’ projects. However instructors often prefer the appearance of control and visibility offered by the waterfall model. Most of the research on agile methodologies in education has concentrated on the use of Extreme Programming and Pair programming [4,5,13,14,17,18,19]. Not much attention has been dedicated to the use of Scrum in education yet. In this paper, we describe a study that focuses on the use of Scrum in mobile application development in a class setting. Students of a class on “Mobile Application Development and Entrepreneurship” were introduced to a new area of programming, i.e. mobile programming, while being exposed to entrepreneurial opportunities in the global mobile service industry. The just-in time technical knowledge acquired in the course was applied in the design and implementation of an innovative mobile application for a real client using Scrum. We developed a model of working that emphasized the use of Scrum in the project component of the course and that can be used by other instructors interested in introducing Scrum in their teaching. The model created a Scrum set-up involving a certified professional Scrum Master of the New York software industry to increase the quality on the project. The instructor of the course played the role of the Product Owner to limit the number of requirements assumptions developers would do on the software to be developed and provide all developers with the same Scrum experience. Three teams of students developed the same application. The model was tailored to the constraints of the classroom setting (e.g., impossibility of a Daily Scrum Meeting and loss of face-to-face communications). The mobile application to be developed targeted the African market. The study explored the learning curve, perception and difficulties with Scrum encountered by students who were exposed to Scrum for the first time. It drew conclusions on the appropriateness of Scrum in mobile application development by analyzing questionnaire data gathered on the projects. The wiki of the course can be found at: http://atlantis.seidenberg.pace.edu/wiki/mobile2008.
This paper is organized as follows. Section 2 presents the context of the study with a description of the course, the Scrum setting, the mobile application to be developed and the tooling environment to support the development process. Section 3 describes the findings. Section 4 concludes with lessons learned, recommendations and guidelines to instructors interested in similar initiatives with Scrum, mobile application development or both. It also presents future plans.

2. CONTEXT
This section describes the scenario that supported the introduction of Scrum in a classroom setting and provides some background to the paper.
Course description. The study described in this paper was conducted in a six-week course entitled “Mobile Phone Application Development and Entrepreneurship” at Pace University in summer 2008. The course met twice a week. It introduced students with previous experience in Java and software engineering to the basics of mobile phone application development with Java ME. The topics covered in the course included a presentation of the mobile landscape, i.e., phone devices, operating systems, development environments and a survey of existing mobile applications based on social networks
and with social impacts [7,12]. Java ME is the language supported by the largest number of devices. The Java ME topics introduced in the course were the Java ME architecture, high-level interface design (e.g., lists and forms) with some best practices on usability [8], internationalization to localize applications in different languages, record stores to save data and text messaging to send SMS messages. The entrepreneurship component focused on the description of the mobile industry in the US and in some developing countries in Africa and South America, the definition of innovation and entrepreneurship in the context of the global mobile industry and a presentation based on research on the new trends in terms of applications. In an attempt to introduce agile methodologies, students collaborated on a small but realistic project that considered the development of a mobile phone application to manage the orders and the sales of a restaurant in Senegal in Africa. Students used Scrum as the development framework to gain practical experience with it, understand its advantages over Waterfall that they used on previous projects, and to increase the chance of getting a working mobile application at the end of the six weeks of the course.
Implementation of Scrum. Students were distributed in three Scrum teams of two or three (part-time) students each. A professional Certified Scrum Master played the role of the Scrum Master, and the instructor of the course (who is also a Certified Scrum Master) acted as the Product Owner and Client. Having an experienced Certified Scrum Master in the project offered an industry perspective and emphasized an appreciation for process and software quality by the students. The project spanned six weeks with one week for the introduction of Scrum and a meeting in the Second Life virtual environment for socialization, two Sprints of two weeks each, and one week for final presentations and demonstrations. The Scrum Meetings took place twice a week for each team during class time and lasted fifteen minutes; the Scrum Master participated remotely via conference calls and used a screen sharing software for one of the Sprint Demo Reviews and Sprint Retrospectives. The Scrum Master was present in person for the lecture introducing Scrum, one of the Sprint Demo Reviews and Sprint Retrospectives and the final demonstrations.
Tooling. Introducing Scrum into a classroom setting has constraints to be accounted for and tooling is crucial to support its efficient implementation. For example, the Daily Scrum Meetings cannot take place daily and teams cannot use wall-sized boards with tasks written on post-it notes to represent the Sprint Backlogs. Additionally, Scrum teams were not able to meet often outside of class time due to conflicting schedules. Interactions with the Scrum Master were mostly via conference calls. Each team used the same tooling environment for socialization, communication, project management and development. We chose a simple tooling environment composed of tools students were mostly already familiar with to avoid burdening them with too many technologies to learn in a short period of time. Based on some previous work on the impact of socialization via virtual worlds on software development [9], we organized a meeting in Second Life on the Pace University Island to foster team bonding and ease communications with the Scrum Master. The meeting permitted everybody to be introduced to each other and carry on different activities in Second Life in a relaxed atmosphere before tackling the project. Teams used part of the class time for discussions about the project and communicated using instant messaging, phone calls, some rare face-to-face meetings outside of class, and mailing lists the Scrum Master and Product Owner were part of. Scrum Meetings were carried out during conference calls; webcams were not used because the classrooms were not equipped with webcams and we wanted to optimize class time. The teams maintained wikis with all the software artifacts they produced during the project (e.g., links to Sprint Backlogs and code repositories, designs, screenshots and demonstration videos of the mobile application). Google Calendars were used for milestones. The Product Backlog and the Sprint Backlogs of each team were kept in shared Google Docs for constant accessibility and increased team coordination. The Sprint Backlog contained the names of the team members with the number of hours they will be available during the Sprint, user stories decomposed into tasks, other tasks related to bugs and constraints, the estimated time for each task and the time remaining to complete each task. Figure 1 presents the Sprint Backlog of one of the teams. The mobile applications were developed in Java ME. The engineering tooling comprised the use of a professional integrated development environment, specifically Eclipse with the EclipseME plug-in (http://eclipseme.org) for mobile application development. The Sun Wireless Toolkit (http://java.sun.com/products/sjwtoolkit) was used for internationalization. Design options were produced using screen mock-ups on paper or in Word. Sun java.net project repository (http://java.net) was chosen for its ready-to-use Subversion capability for version control and issue tracking facilities to ensure quality. Students created screen capture videos of their software in use using Camstudio (http://camstudio.org).

Software to be developed. To reflect a real situation and prevent students making assumptions regarding requirements and deployment, and to encourage open discussions with the Project Owner, the choice of the software to be developed converged to a mobile application to manage orders and sales in a traditional restaurant located in Senegal. The interest for Senegal came from a project the instructor of this paper is leading. This project consists of the introduction of mobile application development into the curriculum of different Senegalese universities and the development of mobile applications with social impacts to be deployed in Senegal. This project is documented at http://atlantis.seidenberg.pace.edu/wiki/senegal. The decision to develop this software was also liked with the fact that there is a need of mobile applications for the African market, a fast growing mobile market. The mobile application for Senegalese restaurants was to be used by waiters and managers. It would permit waiters to manage the orders and patrons’ bills more efficiently and managers to increase their awareness of the financial situation of
their restaurants. The software had to accommodate Senegalese dishes, use of the Senegalese money (Francs CFA), and be delivered in English and the two national languages of Senegal, i.e., French and Wolof. At the beginning of the project, students were provided with a project statement, an initial Product Backlog, existing menus of real Senegalese restaurants, and pictures of dishes prepared by the instructor. During the course of the project, teams had access to a consultant in Senegal to ask contextual questions. The consultant helped in the internationalization of the mobile application. The teams also met in a Senegalese restaurant in New York City to immerse in the culture and to socialize. The application was described by a Product Backlog composed of nine user stories (US). The list of prioritized high-level user stories is provided in Table 1. Figures 2 and 3 show the design and a screenshot of the mobile application produced by one of the teams. The goal of the project was not to go until deployment of the software in Senegal but to provide a real experience with Scrum and mobile application development to students. The applications were deployed on the mobile phones of the students.
Table 1. User stories of the mobile application to manage the orders and sales in a Senegalese restaurant produced by the product owner.
US1 List tables with payment status
US2 Take an order by distinguishing entrees, desserts and drinks
US3 Provide icons for table status and pictures of dishes
US4 View orders by tables
US5 View the current total of the orders taken by a waiter
US6 Get payment for an order
US7 Update an order
US8 Internationalize the application in English, French and Wolof
US9 Send SMS with the total of the orders of the day to a manager

Monitoring of the Teams. In this study we were interested in exploring the overall experience, learning curve, perception and difficulties with Scrum encountered by teams exposed to Scrum for the first time. We also looked at the main difficulties teams faced in mobile application development and appropriateness of Scrum in mobile application development. Following Scrum eased the monitoring of the work of the teams. Data from the Sprint Backlogs were used to produce Burndown Charts for the different teams and to monitor how many hours of work remain until the team’s commitment is completed. The observations of the Scrum Master and the Product Owner on the adoption of Scrum by the teams were logged in a shared Google Docs. Notes on each Scrum meeting and Sprint Demo Reviews and Retrospectives were maintained in Google Docs and shared by the Scrum Master and the Product Owner. A post-project questionnaire was administered to the teams to gather data about their experience.

3. FINDINGS
Three versions of the mobile application for the restaurant were implemented by three teams of students who followed the Scrum framework. All teams delivered working software at the end of the project. They were particularly positive about their experience with Scrum. The use of Scrum was perceived as the main reason of the success of the project by all the Scrum roles of the project when time was a constraint and mobile application development was learned just-in time.

3.1. Perspective of the Scrum Master
Scrum Learning Curve and Adoption. Students were introduced to Scrum during a two-hour lecture by the Scrum Master and applied it directly on project. During the first Sprint Planning, the teams had difficulties decomposing user stories into tasks. They did not consider research, environment setup, design, proof of concept, testing, and code refactoring as tasks. Giving examples of tasks clarified the notion and resulted in better Sprint Backlogs with detailed tasks. The notion of task ownership had to be explained as students considered the team to be responsible for a
task, whereas in Scrum responsibility is individual and the task owner can seek help from within or outside the team. It was difficult for the teams to estimate the duration of the tasks in general because of their unfamiliarity with mobile application development and the difficulties of some topics such as record stores. The tasks duration were in general underestimated and teams spent sleepless nights to complete them. They acknowledged that they were not realistic in their initial estimate for the first Sprint and did a better job in the second Sprint. After the second Scrum Meeting teams learned how to fill out the remaining time section of the Sprint Backlog but needed to be reminded often to update it. Two out of the three teams understood the main Scrum techniques in the second week of the project. These two teams worked together and used all the tools from the suggested tooling environment. Team members refactored and adapted each others’ code. They delivered software with all the functionalities they committed to. The members of the third team took more time to assimilate the practices of Scrum. Figures 4 and 5 provide Burndown Charts of one of the teams for the two Sprints.
Communications with the Scrum Master. Communications with the Scrum Master during the Scrum meetings went smoothly; during daily Scrum meetings teams handled the three questions with ease. However, team members had to be reminded to answer the questions in their names and not for the team. It would have been beneficial to use a webcam during the Scrum Meetings such that the Scrum Master could have observed the teams and understood their functioning better. It was interesting to see that all team members were always standing during the meetings. If one of the team members was sitting, there was always another one to remind her / him to stand up.
Commitment. In Scrum teams decide by themselves on how much work they will commit to complete in a Sprint, rather than having it assigned to them. Teams realized that they had to focus more when working with Scrum. They needed to work on their assigned tasks in an organized way. One of the teams had a discussion on what it means for a task to be in the Sprint Backlog and what the “done” status refers to. Teams took the notion of commitment very seriously and put all effort in accomplishing their tasks on time. The issue was on the estimation of the time to accomplish them.

3.2. Perspective of the Product Owner
Teams did not ask many questions about the features and context of the mobile application to the Product Owner. Students were provided with menus of Senegalese restaurants, information about currency in Senegal and translation of the dishes. They also had access to a consultant in Senegal. Most of the questions related to the mobile application were about the look and feel to make it usable and friendly to Senegalese users. At the beginning of the project, teams were overwhelmed by various technologies, methodologies and tools; to be learned for the project. At the end of the project, they were very satisfied (even surprised) with their achievements. The internationalization user story was not implemented by two of the teams; this user story was of low priority. One of the teams implemented all the initial user stories. Two teams did not implement the user story based on SMS. Two teams delivered all the functionalities they committed to. The three mobile applications had some specificities and incorporated some interesting personalized touches at the user interface level. For example, one of the applications showed the total of the orders directly on the first screen, which was judged as a good design choice. Another application used very appealing icons to determine the status of a table (e.g., free, busy and bill paid, and busy and bill not paid).

3.3. Perspective of the Scrum Team
Teams liked the notions of commitment, and the visibility and the
increased productivity offered by Scrum. They stated: “Scrum
permitted us to have a working application that was developed faster than if we would have used the waterfall development process” and “Scrum made me more productive, permitted more interaction with classmates, and facilitated constant awareness of what was achieved and how much work is left”. The main advantage of Scrum reported by the teams is its capability of catalyzing the energy on committed tasks. Students reported that: “During the Scrum meeting our focus was strictly on the project and this helped get things done” and “Scrum forced us to stay on track; it made us focus on the features we were committed to implementing”. The most commonly encountered difficulties with Scrum were in estimating the time to complete particular tasks and the gap between the Scrum meetings due to the classroom constraints: “I had problems evaluating the time of my user stories. I guess this is something you improve with experience”.

3.4. Perspective of the Instructor
It was important to use class time for the teams to do the planning and produce the initial Sprint Backlogs with the decompositions of the user stories into tasks, assignment of the tasks to team members /owners and initial estimation of the duration of the work. The maintenance of the Sprint Backlogs (e.g., remaining time for each tasks) was also checked during class time when the whole team was present. This was particularly relevant as the teams were new to Scrum and could not meet often outside class. Being the Product Owner and the Instructor of the class was not problematic but it would have been better for the students to be able to distinguish the Product Owner from the instructor. Students asked lots of technical questions to the instructors and it took over asking questions about the software product to be developed to the Product Owner.

3.5. Mobile Application Development with
Scrum
Overall Experience of the Students in Mobile Application Development. One of the difficulties encountered by the teams was with getting familiar and comfortable with mobile software development, which was a new programming area from a technical and usability point of view. The most difficult topics for the students were the implementation linked with record stores that required knowledge of hash tables for efficiency purposes. Going from Web application design to mobile application design requires a paradigm shift in the way to solve problems. Constraints linked with the screen size have to be accounted for, as well as the mobile usability standards. Simplicity is particularly important. During the first Sprint Demo Reviews, the three teams showcased prototypes with user interfaces and interaction design resembling Web applications. Teams then refined their user interfaces and interaction design to adhere to mobile standards.
Scrum and Mobile Application Development. Mobile phone applications are in general simple and activity-centered applications dedicated to accomplish a very restricted number of actions. They can be developed in a short time and a positive user experience is crucial. In our study the use of Scrum was perceived as the main reason of the success of the project by all Scrum roles when time was a constraint and mobile application development was learned just-in time. Scrum permitted teams to focus their work, an idea emphasized by the notion of commitment.

4. RECOMMENDATIONS, CONCLUSIONS
AND FUTURE WORK
During this project, we attempted to provide students with a real experience with Scrum on mobile application development projects. We defined a model of working to be used in a classroom setting that involved Scrum teams, a certified Scrum Master, a Product Owner and a Client. Sprints lasted two weeks. Daily Scrum could only take place twice a week. We expected that Scrum will increase the chance of successful delivery of mobile applications that are developed in a short period of time. This hypothesis was confirmed by our study. We also noticed that Sprints of two weeks were particularly adapted to teams new to Scrum. The key factors of success related to Scrum were the strong notion of commitment and the fact that Scrum facilitates focus on planned tasks.
We summarize in Table 1 some initial set of guidelines based on our lessons learned. These guidelines are directed to instructors interested in replicating and adapting our work. The guidelines include how to plan, facilitate, gather data and reflect on students’ projects that use Scrum. Moreover we believe that our research, even if conducted in a classroom setting, may have a broader and more general impact that will be of interest in the software industry, in the agile methodologies and mobile application development communities.
In the future, we plan to set up studies to evaluate the use of Scrum by students of different backgrounds (e.g., countries, languages, exposure to technology, and levels of studies). We also intend to define models to introduce Scrum in students’ projects in a global setting, i.e. where students / developers are distributed in different countries. The use of tooling environments such as IBM Jazz (http://jazz.net) and Rally software (http://www.rallydev.com) on students’ projects will be evaluated.
Table 2. Introducing Scrum in a classroom setting.
Reflecting
and to update the Sprint Backlog.
Take notes and summarize all the Scrum Meetings.
Formally close the project with thanking the different actors involved.
Summarize what went well on the project and what didn’t and determine how to refine the model.
               Planning
Define a Scrum scenario that assigns the Scrum roles, determine the length of a Sprint and define the organization of the Scrum meetings.
Use or establish a (strong) relationship with a certified Scrum Master. There is a need for a strong commitment from the Scrum master as he / she is responsible of the implementation of Scrum and needs to be present virtually or physically at all the Scrum Meetings. Commitment from the person playing the role of Product Owner / Client is also required as she / he can be solicited often by the Scrum team. We believe that these roles should not be assigned to students of the Scrum teams and that the involvement of a certified Scrum Master is a positive investment.
Select a real project.
Identify the constraints and assess the risks related to the implementation of such model for the course.
Select a tooling environment composed of tools for Scrum artifacts, development, coordination, project management and socialization.
Determine research objectives and set-up data collection instruments.
Prepare tutorials for Scrum and the technologies to be used to support Scrum.
Organize socialization activities involving the Scrum Master, Product Owner and team members to increase team bonding.
Set up a way to keep track of the team communications to increase team awareness and monitor communications.
Allow time to be used during class for Scrum Meetings, Demo Reviews, Retrospectives,
5. ACKNOWLEDGMENTS
This work is partially supported by a National Collegiate Inventors and Innovators Alliance grant entitled, “Sustainable Technology-based Entrepreneurship for the Senegalese Market” and a Campus Second Life scholarship. We thank the students who participated to this study. We also would like to thank Mamadou Bousso from the University of Thiès in Senegal for providing us with some of the contextual information to carry out the project.
