Teaching Agile Collaboration Skills in the Classroom

Abstract—Agile methodologies like Scrum or Extreme Programming have come a long way over the last fifteen years. Recent quantitative studies show that many companies have successfully adopted agile methodologies. It was found that in agile software development, experience leads to collaboration. It could also be shown that successful professional agile teams tend to use more collaboration practices. In 2013, the new Computer Science studies at the University of Applied Sciences were started. For this, a new curriculum was developed. This paper presents and discusses the lectures, labs and educational software projects in the programming and software engineering modules. It is discussed how agile collaboration and collaboration practices can be taught in the classroom. For this, the setup and observations of an agile student project are presented and different online collaboration tools are discussed. It is argued that software engineering education benefits significantly from embracing the modern collaboration tools the Internet has made available.

Keywords— Software Development, Curriculum, Collaboration, Agile.


I. INTRODUCTION
Agile software development has become a mainstream approach in software project management as recent studies show [1], [2]. With this trend, also many less experienced non- expert teams have started applying agile approaches. The authors have conducted several studies, which show that especially collaborative practices like pair-programming, daily stand-up and retrospectives are rarely applied by less- experienced agile teams. The usage gradually evolves over time with increasing experience in agile development. The studies show that agile methodologies are of high practical relevance. Furthermore, it appears that there is a high demand for well-educated software engineers in the agile domain, and that there is a significant lack of knowledge in agile development. Another phenomenon which was found was that distributed development, either with near-shore or off-shore teams, has become standard. This makes collaboration more challenging, and makes it important to work with appropriate collaboration tools.
The studies delivered excellent input for further evolution of undergraduate and graduate software engineering education. It showed what:

the current state of the art in practice is 
competences are needed in industry 
competences are lacked in industry
x
x
x
Based on the results, which are presented in section III.A, and our experience in teaching software engineering and agile methods for more than a decade, we started developing a new software engineering curriculum. It especially addresses agile methods with a much higher emphasis on teaching collaboration practices and agile values. Special attention was paid to also integrating Internet based collaboration tools, as enablers for software development in distributed teams. In this paper we present this new curriculum approach, describe their first experiences and discuss further improvements.
The rest of the paper is structured as follows: Section two discusses related work. Section three presents results from the various studies and their impact on the new curriculum. Section four presents the new curriculum, and especially also addresses agile methods and the practices that need to be taught. Section five presents how collaboration and agile values are taught and practiced in the classroom and the usage of appropriate collaboration tools. Section six evaluates the observations, followed by final conclusions and ongoing evolution of the curriculum.




IV. THE NEW COMPUTER SCIENCE CURRICULUM
In fall 2013, the new Computer Science studies at the University of Applied Sciences were started. For this, the curriculum [1] was updated and a lot of content newly developed. In this paper we will have a closer look at the lectures, labs and project modules in the programming and software engineering module.
The total workload of the Bachelor program is 180 ETCS1 credits. There are different study models: a three-year full-time study, a four-year part-time study with or without a practice- integrated Bachelor. The content of the four-year course corresponds to that of a full-time academic program with 180 ECTS credits. In the first two years, programming and software development make up over a quarter of the ETCS credit. Four ETCS credits usually translate to a 90 minutes lecture and a 90 minutes programming lab a week.
TABLE I. OVERVIEW SOFTWARE ENGINEERING OF FULL-TIME CURRICULUM (UNDERGRADUATE)
 Figure 5. Agile Competence Pyramid
    1.Semester 2.Semester 3.Semester 4.Semester
Programming in Java
4 ECTS 4 ECTS -
-
Software Development
-
-
4 ECTS 4 ECTS
Project Module 2 ECTS
6 ETCS 4 ECTS 4 ECTS
          1
1
2
2
2
2
Part-time studies are designed in such a way that working while studying is supported to the greatest extent possible. For example, the timetable is designed compactly and credit may be given for professional activities.
In the development of the new curriculum, the experience from previous lectures and research [21] [22] was integrated. The curriculum was purposely designed with both plan-driven and agile methodologies in mind.

A. First Year: Introduction to Programming with Flipped Classroom
In the first year, the main focus is on general programming concepts from a software engineering perspective2. The students are taught object-oriented programming with Java. The first semester is quite extraordinary because we teach an “objects-first approach” [5] in combination with the “flipped classroom” concept [11].
1 ECTS = European Credit Transfer System: uniform European evaluation system of performance criteria as part of the Bologna Reform. Around 30 hours of student work corresponds to one credit. Full-time students study an average of 30 ECTS credits and part-time students 22 ETCS credits per semester.
2 Computer Science concepts are taught in different lectures and are not discussed in this paper.
  
One of the reasons for choosing “objects-first” was that it allows an approach where teachers truly deal with the important concepts first. We use Java as programming language and BlueJ [12]. “BlueJ is a Java simple integrated development environment (IDE) that is being developed and maintained at the University of Kent at Canterbury, UK, and La Trobe University, Melbourne, explicitly as an environment for teaching introductory object-oriented programming.” [12] With BlueJ, students can create and interact with objects directly. This has the advantage, that important object-oriented concepts such as classes, objects, methods and parameters can easily be discussed in a concrete manner before looking at the details of Java syntax. After the students become familiar with Java, they are encouraged to switch to a professional IDE like Eclipse [13].
Flipping the classroom has the benefit that students can explore topics in greater depth during class time. Solving and discussing programming exercises in groups or the whole class create meaningful learning opportunities. The teacher explicitly chooses the best-suited exercises to reinforce the understanding of the topic.
In a flipped classroom, content delivery may take a variety of forms. We use a combination of text reading and online collaboration. The course is based on the excellent textbook “Objects First with Java – A Practical Introduction using BlueJ” [5]. For online collaboration, a learning management system (LMS) is used. The textbook together with the information on the LMS3 delivers all the necessary content outside of the classroom. Online quizzes are used to assess the students’ progress and give them instant feedback. Furthermore the quizzes are important because they are the basis for choosing the above-mentioned programming exercises.
Next to the programming introduction, the students learn to write automatic tests with JUnit, the benefits of clean code [14] and how to use a code versioning system (CVS).
In the first year, there is also a project module (Table I) where the students learn to develop software with a plan-driven methodology, i.e. waterfall. In the first semester they write a requirements specification and in the second semester the software is developed, tested, reviewed by a lecturer and deployed.

B. Second Year: Focus on Software Engineering
In the second year, the focus is on software development with iterative and agile methodologies. In the third semester, the students are taught the “Unified Process” (UP) [14]. Since the authors are not involved in this part of the curriculum, UP will not be further discussed in this paper.
In the fourth semester, the focus is on agile methodologies: Scrum [16] and eXtreme Programming (XP) [17]. In the lecture the Agile Manifesto is discussed in the lecture and the students are introduced to agile software development, i.e. Scrum. The students learn about Continuous Integration (CI) and how to configure a CI-Server. The importance of automatic testing is reinforced; test-driven development (TDD) discussed and applied. The educational objective of the last semester is to sum up the technical and collaboration practices as presented in chapter III.C
In the fourth and last semester of the basic study, the students develop a larger software application in an agile team in the second project module. Details and motivation will be presented in section V.B.

3 The Internet simplifies flipping very much: We use a web-based e-learning platform for teaching, learning, assessment and communication. LMS can be used to provide educational content, form groups, organize users, and assign users to the courses. You can learn, assess, communicate, and share.

V. COLLABORATION IN THE CLASSROOM
One of the key differences between agile and plan-driven software development methodologies is the emphasis on collaboration and feedback. In Scrum, the predominant agile methodology, the collaboration practices and values are central. Therefore it is important that the students learn to apply them in a realistic classroom setup.
In the new curriculum this is done in three-steps:
1. Students learn the theory of Scrum and XP
2. Students play the Scrum Lego City game as first hands-on experience.
3. Students execute an agile software development project over one whole semester in “real” teams of five to nine members.

A. Scrum Lego City Game
As a hands-on introduction to Scrum, the authors usually play the Scrum Lego City game [20] with the students. Over the years, we have played this game many times. It has always been very educational, interesting and a lot of fun. The game addresses every role, ceremony and Scrum principles: Starting with the product vision then presenting the product backlog, making the sprint planning, developing the Lego city (product) and ending with the review meeting and the retrospective. The game takes between two and three hours and is played in teams of 5 to 9 members. The teacher acts as customer – or Product Owner in Scrum terminology – and guides the team building while building their city with Lego bricks after their product visions.
Scrum is all about teamwork, respecting people, cooperation, understanding and productivity. The Scrum Lego City Game is designed to make students understand and “feel” how and why Scrum works. The game promotes collaboration and uses as much as possible of what has been learned about Scrum in theory

B. Classroom Setup for Agile Collaboration 
1) Maturity leads to Collaboration
In [23] it was found that in agile software development, experience leads to collaboration. It could also be shown that successful professional agile teams tend to use more collaboration practices. Unfortunately, this transition to more and better collaboration tends to take many years. This raises two questions: What are the barriers and can this transition to maturity be accelerated?
TABLE II. BARRIERS AND DIFFICULTIES
Comp Prof
 Ability to change organizational culture Availability of personnel with necessary skills Customer collaboration
Project complexity or size
General resistance to change
Lack of management support
Budget constraints
Confidence in ability to scale agile
29% 37% 18% 14% 16% 14% 22% 12% 4% 9% 3% 6% 5% 4% 1% 3%

Table II gives some hints to the first question. In the Swiss Agile Study [1] the participants were asked about the top barrier in their company. (Item: “What are the current barriers and difficulties to further adopt agile software development in your company?”). As can be seen, culture, skills and customers are the top barriers
In the following paragraphs, we present answers to the second question.
2) Educational Software Development Project
In an educational software project, we are in a privileged situation because all the barriers listed in Table II are either irrelevant or can be minimized by choosing the project setup properly. Still, professional and educational projects differ in many ways and we have to be careful not to end up with mimicry.
Some of the advantages in an educational setup are:
x Students can choose a project vision together with the coach
x Project has a small scope and no “real” budget constraints
x Students can collaborate with an “ideal” customer since the coach acts as customer
x Students can apply all technical and collaboration practices
x Students can experience agile values
x Students neither have to work with legacy code nor
worry about the intricacies of a production environment Some of the impediments in an educational setup are:
x Students usually only have one project meeting per week
x Students only work sporadically on the project
x Students often work on the project at different times
x Students are not co-located, i.e. the daily stand-up meeting is not feasible
x Students are less experienced
In the classroom, it is possible to set up an environment
with little or no impediments, which makes this transition much easier and faster. The reminder of this chapter describes the setup of the student projects and the experience made in respect to agile project management and collaboration practices. Table III gives the outline of the complete agile student projects.
Scrum: We chose Scrum [16] as the methodology because of the good experiences we had made in industry and research projects. Further, Scrum is the most widely used agile methodology [1] in Switzerland. For the educational development project, Scrum was adapted to fit the special requirements in the classroom.
Optimal Student Teams Size: Optimal development team size is small enough to remain agile and large enough to complete significant work within an iteration or Sprint. In Scrum the recommendation is seven, plus or minus two4 [16]. Fewer than five team members decrease interaction and collaboration, which might result in smaller productivity. Smaller teams might also encounter skill constraints. More than nine members require too much coordination. Large development teams generate too much complexity for an empirical process, like Scrum, to manage.
What about the optimal size of student teams? The authors had best results when the team size was at the upper limit. In smaller student teams there is a risk that the students do not realize the necessity of proper project management. Much too often, project management is seen as an overhead and, in the worst case, only applied because the coach says so. In properly sized teams, project management is crucial for success. Another benefit of larger teams is, that the students get more work done, which results in more realistic software applications. In our experience optimal student team size is between seven and nine members.
Automatic Testing: Next to team size, we demand that the teams do rigorous automatic testing. Automatic testing is difficult, but in combination with refactoring it has a profound effect on the code quality. It is important that the students have a test concept and test environment ready before they actually start coding! Therefore we introduced a “Sprint Zero” before the official project start. The goal of Sprint Zero is simple: All teams are able to do automatic testing.
The students have to implement a complete test case, which demonstrates their ability to test the application from end-to- end. At the end of every regular Sprint, code coverage is inspected and discussed with the students.
4 The roles of Product Owner and Scrum Master are not included in this count unless they are also completing the work of the Sprint Backlog.





Before start of semester
Week 1 (Kick-off meeting)
Week 2 (Sprint 0)
Week 3
Week 4 (Project start: Sprint 1)
Week 6 – 14 (Sprint 1 - 5) Every even week
Week 16
Students and faculty are informed about the project module and asked to send in project ideas.
Kick-off. Presentation and election of best- suited project ideas.
Composition of student teams
Sprint 0: Students setup complete automatic testing and building environment-
Introduction to IT-infrastructure
Sprint 0: Students setup complete automatic testing and building environment
Demonstration of testing and building environment
Sprint and Release Planning
Sprint Review & Sprint Retrospective Planning meeting of new Sprint Development of application
Final presentation of application
End of project
TABLE III. OUTLINE OF AGILE STUDENT PROJECTS

Continuous Integration (CI): Continuous Integration is seen as an absolute must by many professionals to be able to deliver software with high frequency. For the student projects, the concept of automatic builds and CI are introduced. Every team uses Maven [24] and Jenkins [25] to build and integrate their software.
Clean Code and Craftsmanship: The idea of highlighting the importance of software development practice was popularized in Clean Code: A Handbook of Agile Software Craftsmanship [14]. The author introduces the disciplines, techniques, tools, and practices of software craftsmanship. Craftsmanship is much more than a technique: It is about attitude. Starting in the first semester, the students are advised to follow the Clean Code guidelines. The authors have observed that following and discussing these guidelines has a profound impact on the quality and design of the code base.
Sprint Meetings: At the end of every Sprint, the coach attends both the Sprint Review and Sprint Retrospective meetings of every student team. In these meetings, the coach learns whether the project is on track or not.
In the beginning of the new Sprint, the coach attends the Sprint planning meeting. In this meeting, the coach acts as the Product Owner. As Product Owner, the coach can steer the project in the proper direction.
All three meetings usually take place on the same day. The Sprint Review takes about 30 minutes, the Sprint retrospective about 15 minutes and the Sprint planning, depending whether User Stories have to be estimated or not, between 15 and 45 minutes. These meetings are an excellent occasion to get a good overview of all projects and therefore the coach should attend all of them.
Final Presentation: At the end of the project module, all the teams present their application in the plenum. This is a great opportunity for all teams to present their achievements. The presentation takes about 20 minutes and consists of the project vision, architecture and design of the application as well as a demonstration.
C. Internet simplifies Collaboration
In the educational student project, the team is mostly not co-located. Additionally, the students often work at different times. This makes collaboration difficult because face-to-face communication is not easily possible. Furthermore, the teams cannot use physical task boards either. Fortunately, there are online task boards, which can be a good substitute for physical ones.
In this chapter we will present some collaboration tools, which help to circumvent the impediments in “distributed” student teams
An agile project rapidly and reliably produces new know- how and new knowledge. Good collaboration tools make the exchange of new know-how and new knowledge between the single team members and the coach possible. Without the Internet and its online collaboration tools, distributed student teams would not be feasible. The tools simplify collaboration among students and make progress visible for the coach. The same is true for problems and difficulties.
1) Jenkins CI-Server
Jenkins [25] is an open source continuous integration server. It provides immediate feedback of the build status and the overall project progress, both to the students and the coach.
2) GIT and GitHub
Git [26] is a distributed code versioning system (CVS) designed to handle everything from small to very large projects with speed and efficiency. Its workflow make it particularly well suited for distributed software development teams. Git is the successor of SVN (subversion) and is rapidly becoming the most widely used CVS.
GitHub [27] is a web-based Git repository, which is often used for hosting open-source software projects. GitHub provides several collaboration features such as bug tracking, feature requests, task management and wikis for every project.
3) Trello
Trello is a very simple collaboration tool for all kind of projects. Its main advantage is its simplicity. Trello runs in the web browser and almost on any mobile device. It consists of a task board that is very similar to a physical Scrum board. Since it is a web application, no software installation is needed.
In the student project, Trello is used to manage the user stories and the associated tasks. Trello is a good, lightweight alternative to professional agile tools like JIRA [29]. By looking at Trello, the coach immediately knows what is going on in the different projects.
4) OpenOLAT Learning Management System
OpenOLAT [30] is a web-based e-learning platform for teaching, learning, assessment and collaboration. OpenOLAT is simple and intuitive to use.
5) Project Wiki
In the student projects, a project wiki is used for documentation purposes. GitHub comes with a project wiki. Therefore GitHub is usually used for documentation.
6) E-mail
E-Mail is primarily used as means of communication between the coach and the teams. As coaches we prefer written, asynchronous communication to synchronous, like the good old phone or Skype.
7) Skype
Members of the student teams often use Skype to ask each other questions and communicate. The coach does not use Skype with the students.


VI. EVALUATION
A systematic evaluation of the new curriculum with respect to the learning targets in software engineering has not yet been executed for the first round. This evaluation will be carried out after the second or third round. Instead we present our first experiences and feedback from the students. In the round we a total of 45 students, and have setup five teams each with nine students.
In the first year we observed an improvement of the programming skills and code quality. The object first approach with BlueJ [5], [12] has clearly improved the understanding and depth of important OO-concepts skills of most students. Paying special attention to technical practices like automatic unit tests and clean code has had a positive effect on design, quality and documentation.
Applying a Learning Management System (LMS) was helpful for collaboration and presentation of material. This was especially true in the flipped classroom environment, because solving and evaluating the quizzes was supported by LMS. On the other side, the flipped class room concept showed to be pretty laborious in preparation.
In the second year, the highlight was unquestionably the agile project module for both students and coach. The developed application exceeded the expectations in scope, quality and student commitment. We observed that the coach’s experience in agile software development is important for the outcome.
The coordination of the software development lecture and the project module was reported to be excellent. The students liked the combination of theory and practice. Next some written statements5 of the software development lecture and
5 The statements are translated from German. The statements are taken from the official evaluation system. For the new Computer Science studies, all new lectures and modules were evaluated systematically.
project module in the fourth semester. The students were asked what they liked best: “It’s great that we do Agile..”, “Practical relevance of the topics presented”, “Good coordination of lecture and project module”, “Best project module so far..”, “I liked that we could choose the projects ourselves..”, “Scrum!!”.
From part-time students we often get feedback that they can benefit of the agile practices directly in their job.
Scrum in combination with the online collaboration tools made it possible, to keep the overview of the student projects. Coaching the projects to desired outcome and assessing the team members was possible in an efficient and transparent manner projects.
With respect to evaluation and assessment of the individual students, it is very hard to find out, who did what and how much in the project. The team setup is critical with respect to finding a well-balanced team with the necessary level of knowhow, motivation and commitment. Another critical issue are the Product Owner and Scrum Master roles. We let the students themselves overtake these roles. But they usually lack the necessary experience to fulfill the requirements to these roles.


VII. CONCLUSION AND FURTHER WORK
Collaboration between team members, customers, users and stakeholders is a very important part of agile software development. Maturity leads to collaboration; i.e. mature agile teams apply more collaboration practices. Therefore, it is important that the students learn about collaboration practices and how to live them. This is best realized in a “real” agile project.
This paper discusses how educational projects can be setup in such a way, that students can experience the importance of collaboration. The Internet and its plethora of online tools act as an enabler of collaboration in agile educational software projects. The benefits of online collaboration tools make it possible for the lecturer to coach and steer student software development projects and, last but not least, assess the students. The authors are convinced, that software engineering education benefits significantly by embracing the modern collaboration tools the Internet has made available.
